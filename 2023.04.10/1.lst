     1                                  %include "../st_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> ;; file changed, macros added (by Divari I.N.,
     9                              <1> ;; Department of computer science, MIPT, 2019-2020) 
    10                              <1> 
    11                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                              <1> ;; system dependend part
    13                              <1> 
    14                              <1> ; generic 3-param syscall
    15                              <1> %macro _syscall_3 4
    16                              <1> 	push edx
    17                              <1> 	push ecx
    18                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    19                              <1> 	push %1
    20                              <1> 	push %2
    21                              <1> 	push %3
    22                              <1> 	push %4
    23                              <1> 	pop edx
    24                              <1> 	pop ecx
    25                              <1> 	pop ebx
    26                              <1> 	pop eax 
    27                              <1> 	int 0x80
    28                              <1> 	pop ebx
    29                              <1> 	pop ecx
    30                              <1> 	pop edx
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    34                              <1> %macro _syscall_exit 1
    35                              <1> 	mov ebx, %1	; exit code
    36                              <1> 	mov eax, 1	; 1 = sys_exit
    37                              <1> 	int 0x80
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> ;; system dependent part ends here
    41                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                              <1> 
    43                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    44                              <1> ; output: eax: read bytes
    45                              <1> %macro _syscall_read 3
    46                              <1> 	_syscall_3 3,%1,%2,%3
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    50                              <1> ; output: eax: written bytes
    51                              <1> %macro _syscall_write 3
    52                              <1> 	_syscall_3 4,%1,%2,%3
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    56                              <1> %macro 	PRINT 1
    57                              <1> 	pusha
    58                              <1> 	pushf
    59                              <1> 	jmp %%astr
    60                              <1> %%str	db	%1, 0
    61                              <1> %%strln	equ	$-%%str
    62                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    63                              <1> 	popf
    64                              <1> 	popa
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    68                              <1> %macro	PUTCHAR 1
    69                              <1> 	pusha
    70                              <1> 	pushf
    71                              <1> %ifstr %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifnum %1
    74                              <1> 	mov	al, %1
    75                              <1> %elifidni %1,al
    76                              <1> 	nop
    77                              <1> %elifidni %1,ah
    78                              <1> 	mov	al, ah
    79                              <1> %elifidni %1,bl
    80                              <1> 	mov	al, bl
    81                              <1> %elifidni %1,bh
    82                              <1> 	mov	al, bh
    83                              <1> %elifidni %1,cl
    84                              <1> 	mov	al, cl
    85                              <1> %elifidni %1,ch
    86                              <1> 	mov	al, ch
    87                              <1> %elifidni %1,dl
    88                              <1> 	mov	al, dl
    89                              <1> %elifidni %1,dh
    90                              <1> 	mov	al, dh
    91                              <1> %else
    92                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    93                              <1> %endif
    94                              <1> 	sub	esp, 2  ; reserve memory for buffer
    95                              <1> 	mov	edi, esp
    96                              <1> 	mov	[edi], al
    97                              <1> 	_syscall_write 1, edi, 1
    98                              <1> 	add	esp, 2
    99                              <1> 	popf
   100                              <1> 	popa
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   104                              <1> %macro	GETCHAR 0
   105                              <1> 	pushf
   106                              <1> 	push	edi
   107                              <1> 	sub	esp, 2
   108                              <1> 	mov	edi, esp
   109                              <1> 	_syscall_read 0, edi, 1
   110                              <1> 	cmp	eax, 1
   111                              <1> 	jne	%%eof_reached
   112                              <1> 	xor	eax,eax
   113                              <1> 	mov	al, [edi]
   114                              <1> 	jmp	%%gcquit
   115                              <1> %%eof_reached:
   116                              <1> 	xor	eax, eax
   117                              <1> 	not	eax 		; eax := -1
   118                              <1> %%gcquit:
   119                              <1> 	add	esp, 2
   120                              <1> 	pop	edi
   121                              <1> 	popf
   122                              <1> %endmacro
   123                              <1> 
   124                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   125                              <1> %macro FINISH 0-1 0
   126                              <1> 	_syscall_exit %1
   127                              <1> %endmacro
   128                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   129                              <1> %macro UNSINT 1
   130                              <1> pusha
   131                              <1> pushf
   132                              <1> push dword %1
   133                              <1> pop eax
   134                              <1> mov edi,eax
   135                              <1> mov esi,10
   136                              <1>   xor ebx,ebx
   137                              <1> %%m1:
   138                              <1>    xor edx,edx
   139                              <1>    div esi
   140                              <1>    inc ebx
   141                              <1>    cmp eax,0
   142                              <1>    jne %%m1
   143                              <1>     
   144                              <1>    mov eax,1
   145                              <1>    mov ecx,ebx
   146                              <1>    dec ecx
   147                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   148                              <1>     cmp ecx,0
   149                              <1>      je %%m4
   150                              <1> %%m2:  mul esi
   151                              <1>        loop %%m2
   152                              <1> 
   153                              <1>        mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:       
   156                              <1>       mov eax,edi 
   157                              <1>       xor edx,edx 
   158                              <1>       div ebx
   159                              <1>       add al,'0'
   160                              <1>       PUTCHAR al
   161                              <1>       mov edi,edx
   162                              <1>       xor edx,edx
   163                              <1>       mov eax,ebx
   164                              <1>       div esi
   165                              <1>       cmp eax,1
   166                              <1>       je %%m4
   167                              <1>       mov ebx,eax
   168                              <1>       jmp %%m3
   169                              <1>  %%m4:      
   170                              <1>       mov edx,edi
   171                              <1>       add dl,'0'
   172                              <1>       PUTCHAR dl
   173                              <1>        
   174                              <1>   
   175                              <1> popf
   176                              <1> popa
   177                              <1> %endmacro
   178                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179                              <1> %macro SIGNINT 1
   180                              <1> pusha
   181                              <1> pushf
   182                              <1> push dword %1
   183                              <1> pop eax
   184                              <1>     cmp eax,0
   185                              <1>     jge %%m5
   186                              <1>     PUTCHAR '-'
   187                              <1>     neg eax
   188                              <1> %%m5:
   189                              <1>       UNSINT eax
   190                              <1> popf
   191                              <1> popa
   192                              <1> %endmacro
   193                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   194                              <1> %macro GETUN 1
   195                              <1> pushad
   196                              <1> pushfd
   197                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   198                              <1> xor edi,edi
   199                              <1> xor esi,esi
   200                              <1> %%m1:
   201                              <1> GETCHAR
   202                              <1> cmp al,0xA
   203                              <1> je %%m2
   204                              <1> cmp al,'0'
   205                              <1> jb %%m_err
   206                              <1> cmp al,'9'
   207                              <1> ja %%m_err
   208                              <1> inc edi
   209                              <1> xor ecx,ecx
   210                              <1> mov cl,al
   211                              <1> mov eax,esi
   212                              <1> mov ebx,10
   213                              <1> mul ebx
   214                              <1> sub cl,48
   215                              <1> add eax,ecx
   216                              <1> jc %%m3
   217                              <1> mov esi,eax
   218                              <1> jmp %%m1
   219                              <1> %%m2: 
   220                              <1> cmp edi,0
   221                              <1> je %%m1
   222                              <1> jmp %%m4
   223                              <1> %%m3: PRINT "too big number"
   224                              <1> PUTCHAR 10
   225                              <1> jmp %%m4
   226                              <1> %%m_err: PRINT "ERROR!!!"
   227                              <1> PUTCHAR 0xa
   228                              <1> %%m4:
   229                              <1> ;;;;;;;;;;;;;;;;;;
   230                              <1> push esi
   231                              <1> add esp,4
   232                              <1> popfd
   233                              <1> popad
   234                              <1> sub esp,40
   235                              <1> pop dword %1
   236                              <1> add esp,36
   237                              <1> %endmacro
   238                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   239                              <1> %macro GETSIG 1
   240                              <1> pushad
   241                              <1> pushfd
   242                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   243                              <1> xor edi,edi
   244                              <1> xor esi,esi
   245                              <1> mov ebx,10
   246                              <1> %%m_st1: GETCHAR
   247                              <1> cmp al,0xa
   248                              <1> je %%m_st1
   249                              <1> cmp al,'-'
   250                              <1> jne %%s1
   251                              <1> mov ebx,-10
   252                              <1> push ebx
   253                              <1> GETCHAR
   254                              <1> cmp al,0xa
   255                              <1> je %%m_err
   256                              <1> jmp %%m_st21
   257                              <1> %%s1: push ebx 
   258                              <1> cmp al,'+'
   259                              <1> jne %%m_st21
   260                              <1> GETCHAR 
   261                              <1> cmp al,0xa
   262                              <1> je %%m_err
   263                              <1> jmp %%m_st21
   264                              <1> %%m_st2: GETCHAR
   265                              <1> %%m_st21:  cmp al,0xa
   266                              <1> je %%pr_end
   267                              <1> cmp al,'0'
   268                              <1> jb %%m_err
   269                              <1> cmp al,'9'
   270                              <1> ja %%m_err
   271                              <1> inc edi
   272                              <1> xor ecx,ecx
   273                              <1> mov cl,al
   274                              <1> mov eax,esi
   275                              <1> imul ebx
   276                              <1> sub cl,48
   277                              <1> cmp dword[esp],-10
   278                              <1> je %%j_s
   279                              <1> add eax,ecx
   280                              <1> jmp %%j_per
   281                              <1> %%j_s: sub eax,ecx
   282                              <1> %%j_per: jo %%m_b
   283                              <1> mov esi,eax
   284                              <1> cmp dword[esp],-10
   285                              <1> jne %%m_st2
   286                              <1> neg esi
   287                              <1> jmp %%m_st2
   288                              <1> %%pr_end:  cmp edi,0
   289                              <1> je %%m_st2
   290                              <1> jmp %%m_k
   291                              <1> ;;;;;;;;;
   292                              <1> %%m_err: pop ebx 
   293                              <1> PRINT "ERROR"
   294                              <1> PUTCHAR 0xa
   295                              <1> jmp %%m_end
   296                              <1> %%m_b: pop ebx 
   297                              <1> cmp ebx,-10
   298                              <1> je  %%m_l
   299                              <1> PRINT "too big"
   300                              <1> PUTCHAR 0xa
   301                              <1> jmp %%m_end
   302                              <1> %%m_l: PRINT "too less"
   303                              <1> PUTCHAR 0xa
   304                              <1> jmp %%m_end
   305                              <1> %%m_k: pop ebx
   306                              <1> cmp ebx,-10
   307                              <1> jne %%m_p
   308                              <1> neg esi 
   309                              <1> %%m_p: 
   310                              <1> 
   311                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   312                              <1> 
   313                              <1> push esi
   314                              <1> add esp,4
   315                              <1> popfd
   316                              <1> popad
   317                              <1> sub esp,40
   318                              <1> pop dword %1
   319                              <1> add esp,36
   320                              <1> jmp %%mm_e
   321                              <1> %%m_end:
   322                              <1> popfd
   323                              <1> popad
   324                              <1> %%mm_e:
   325                              <1> %endmacro
   326                              <1> 
   327                              <1> 
   328                              <1> 
   329                              <1> 
     2                                  
     3                                  global _start
     4                                  
     5                                  section .data
     6                                  
     7                                  section .bss
     8                                  
     9                                  section .text
    10                                  
    11                                  _start:
    12 00000000 B800000000                  mov eax, 0
    13 00000005 50                          push eax
    14 00000006 89E5                        mov ebp, esp
    15                                      
    16 00000008 40                          inc eax
    17 00000009 50                          push eax
    18 0000000A 89E5                        mov ebp, esp
    19                                  
    20 0000000C 40                          inc eax
    21 0000000D 50                          push eax
    22                                  
    23 0000000E 40                          inc eax
    24 0000000F 50                          push eax
    25                                  
    26 00000010 40                          inc eax
    27 00000011 50                          push eax
    28                                  
    29 00000012 40                          inc eax
    30 00000013 50                          push eax
    31                                  
    32 00000014 40                          inc eax
    33 00000015 50                          push eax
    34                                  
    35 00000016 40                          inc eax
    36 00000017 50                          push eax
    37                                  
    38 00000018 40                          inc eax
    39 00000019 50                          push eax
    40                                  
    41 0000001A 40                          inc eax
    42 0000001B 50                          push eax
    43                                  
    44 0000001C B90A000000                  mov ecx, 10
    45 00000021 89E5                        mov ebp, esp
    46 00000023 83C524                      add ebp, 36
    47                                  
    48                                  print_stack_1:
    49 00000026 49                          dec ecx
    50                                      UNSINT [ebp]
   130 00000027 60                  <1> pusha
   131 00000028 9C                  <1> pushf
   132 00000029 FF7500              <1> push dword %1
   133 0000002C 58                  <1> pop eax
   134 0000002D 89C7                <1> mov edi,eax
   135 0000002F BE0A000000          <1> mov esi,10
   136 00000034 31DB                <1>  xor ebx,ebx
   137                              <1> %%m1:
   138 00000036 31D2                <1>  xor edx,edx
   139 00000038 F7F6                <1>  div esi
   140 0000003A 43                  <1>  inc ebx
   141 0000003B 83F800              <1>  cmp eax,0
   142 0000003E 75F6                <1>  jne %%m1
   143                              <1> 
   144 00000040 B801000000          <1>  mov eax,1
   145 00000045 89D9                <1>  mov ecx,ebx
   146 00000047 49                  <1>  dec ecx
   147                              <1> 
   148 00000048 83F900              <1>  cmp ecx,0
   149 0000004B 7441                <1>  je %%m4
   150 0000004D F7E6                <1> %%m2: mul esi
   151 0000004F E2FC                <1>  loop %%m2
   152                              <1> 
   153 00000051 89C3                <1>  mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:
   156 00000053 89F8                <1>  mov eax,edi
   157 00000055 31D2                <1>  xor edx,edx
   158 00000057 F7F3                <1>  div ebx
   159 00000059 0430                <1>  add al,'0'
   160                              <1>  PUTCHAR al
    69 0000005B 60                  <2>  pusha
    70 0000005C 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76 0000005D 90                  <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 0000005E 83EC02              <2>  sub esp, 2
    95 00000061 89E7                <2>  mov edi, esp
    96 00000063 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000065 52                  <4>  push edx
    17 00000066 51                  <4>  push ecx
    18 00000067 53                  <4>  push ebx
    19 00000068 6A04                <4>  push %1
    20 0000006A 6A01                <4>  push %2
    21 0000006C 57                  <4>  push %3
    22 0000006D 6A01                <4>  push %4
    23 0000006F 5A                  <4>  pop edx
    24 00000070 59                  <4>  pop ecx
    25 00000071 5B                  <4>  pop ebx
    26 00000072 58                  <4>  pop eax
    27 00000073 CD80                <4>  int 0x80
    28 00000075 5B                  <4>  pop ebx
    29 00000076 59                  <4>  pop ecx
    30 00000077 5A                  <4>  pop edx
    98 00000078 83C402              <2>  add esp, 2
    99 0000007B 9D                  <2>  popf
   100 0000007C 61                  <2>  popa
   161 0000007D 89D7                <1>  mov edi,edx
   162 0000007F 31D2                <1>  xor edx,edx
   163 00000081 89D8                <1>  mov eax,ebx
   164 00000083 F7F6                <1>  div esi
   165 00000085 83F801              <1>  cmp eax,1
   166 00000088 7404                <1>  je %%m4
   167 0000008A 89C3                <1>  mov ebx,eax
   168 0000008C EBC5                <1>  jmp %%m3
   169                              <1>  %%m4:
   170 0000008E 89FA                <1>  mov edx,edi
   171 00000090 80C230              <1>  add dl,'0'
   172                              <1>  PUTCHAR dl
    69 00000093 60                  <2>  pusha
    70 00000094 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88 00000095 88D0                <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 00000097 83EC02              <2>  sub esp, 2
    95 0000009A 89E7                <2>  mov edi, esp
    96 0000009C 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 0000009E 52                  <4>  push edx
    17 0000009F 51                  <4>  push ecx
    18 000000A0 53                  <4>  push ebx
    19 000000A1 6A04                <4>  push %1
    20 000000A3 6A01                <4>  push %2
    21 000000A5 57                  <4>  push %3
    22 000000A6 6A01                <4>  push %4
    23 000000A8 5A                  <4>  pop edx
    24 000000A9 59                  <4>  pop ecx
    25 000000AA 5B                  <4>  pop ebx
    26 000000AB 58                  <4>  pop eax
    27 000000AC CD80                <4>  int 0x80
    28 000000AE 5B                  <4>  pop ebx
    29 000000AF 59                  <4>  pop ecx
    30 000000B0 5A                  <4>  pop edx
    98 000000B1 83C402              <2>  add esp, 2
    99 000000B4 9D                  <2>  popf
   100 000000B5 61                  <2>  popa
   173                              <1> 
   174                              <1> 
   175 000000B6 9D                  <1> popf
   176 000000B7 61                  <1> popa
    51                                      PUTCHAR '|'
    69 000000B8 60                  <1>  pusha
    70 000000B9 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72 000000BA B07C                <1>  mov al, %1
    73                              <1> %elifnum %1
    74                              <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000000BC 83EC02              <1>  sub esp, 2
    95 000000BF 89E7                <1>  mov edi, esp
    96 000000C1 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000000C3 52                  <3>  push edx
    17 000000C4 51                  <3>  push ecx
    18 000000C5 53                  <3>  push ebx
    19 000000C6 6A04                <3>  push %1
    20 000000C8 6A01                <3>  push %2
    21 000000CA 57                  <3>  push %3
    22 000000CB 6A01                <3>  push %4
    23 000000CD 5A                  <3>  pop edx
    24 000000CE 59                  <3>  pop ecx
    25 000000CF 5B                  <3>  pop ebx
    26 000000D0 58                  <3>  pop eax
    27 000000D1 CD80                <3>  int 0x80
    28 000000D3 5B                  <3>  pop ebx
    29 000000D4 59                  <3>  pop ecx
    30 000000D5 5A                  <3>  pop edx
    98 000000D6 83C402              <1>  add esp, 2
    99 000000D9 9D                  <1>  popf
   100 000000DA 61                  <1>  popa
    52 000000DB 83ED04                      sub ebp, 4
    53 000000DE E305                        jecxz stop_1
    54 000000E0 E941FFFFFF                  jmp print_stack_1
    55                                      
    56                                  stop_1:
    57                                      PUTCHAR 0xA
    69 000000E5 60                  <1>  pusha
    70 000000E6 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72                              <1>  mov al, %1
    73                              <1> %elifnum %1
    74 000000E7 B00A                <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000000E9 83EC02              <1>  sub esp, 2
    95 000000EC 89E7                <1>  mov edi, esp
    96 000000EE 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000000F0 52                  <3>  push edx
    17 000000F1 51                  <3>  push ecx
    18 000000F2 53                  <3>  push ebx
    19 000000F3 6A04                <3>  push %1
    20 000000F5 6A01                <3>  push %2
    21 000000F7 57                  <3>  push %3
    22 000000F8 6A01                <3>  push %4
    23 000000FA 5A                  <3>  pop edx
    24 000000FB 59                  <3>  pop ecx
    25 000000FC 5B                  <3>  pop ebx
    26 000000FD 58                  <3>  pop eax
    27 000000FE CD80                <3>  int 0x80
    28 00000100 5B                  <3>  pop ebx
    29 00000101 59                  <3>  pop ecx
    30 00000102 5A                  <3>  pop edx
    98 00000103 83C402              <1>  add esp, 2
    99 00000106 9D                  <1>  popf
   100 00000107 61                  <1>  popa
    58                                  
    59 00000108 58                          pop eax
    60                                  
    61 00000109 89E5                        mov ebp, esp
    62 0000010B 874500                      xchg [ebp], eax
    63                                  
    64 0000010E 50                          push eax
    65                                  
    66 0000010F B90A000000                  mov ecx, 10
    67 00000114 89E5                        mov ebp, esp
    68 00000116 83C524                      add ebp, 36
    69                                  
    70                                  print_stack_2:
    71 00000119 49                          dec ecx
    72                                      UNSINT [ebp]
   130 0000011A 60                  <1> pusha
   131 0000011B 9C                  <1> pushf
   132 0000011C FF7500              <1> push dword %1
   133 0000011F 58                  <1> pop eax
   134 00000120 89C7                <1> mov edi,eax
   135 00000122 BE0A000000          <1> mov esi,10
   136 00000127 31DB                <1>  xor ebx,ebx
   137                              <1> %%m1:
   138 00000129 31D2                <1>  xor edx,edx
   139 0000012B F7F6                <1>  div esi
   140 0000012D 43                  <1>  inc ebx
   141 0000012E 83F800              <1>  cmp eax,0
   142 00000131 75F6                <1>  jne %%m1
   143                              <1> 
   144 00000133 B801000000          <1>  mov eax,1
   145 00000138 89D9                <1>  mov ecx,ebx
   146 0000013A 49                  <1>  dec ecx
   147                              <1> 
   148 0000013B 83F900              <1>  cmp ecx,0
   149 0000013E 7441                <1>  je %%m4
   150 00000140 F7E6                <1> %%m2: mul esi
   151 00000142 E2FC                <1>  loop %%m2
   152                              <1> 
   153 00000144 89C3                <1>  mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:
   156 00000146 89F8                <1>  mov eax,edi
   157 00000148 31D2                <1>  xor edx,edx
   158 0000014A F7F3                <1>  div ebx
   159 0000014C 0430                <1>  add al,'0'
   160                              <1>  PUTCHAR al
    69 0000014E 60                  <2>  pusha
    70 0000014F 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76 00000150 90                  <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 00000151 83EC02              <2>  sub esp, 2
    95 00000154 89E7                <2>  mov edi, esp
    96 00000156 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000158 52                  <4>  push edx
    17 00000159 51                  <4>  push ecx
    18 0000015A 53                  <4>  push ebx
    19 0000015B 6A04                <4>  push %1
    20 0000015D 6A01                <4>  push %2
    21 0000015F 57                  <4>  push %3
    22 00000160 6A01                <4>  push %4
    23 00000162 5A                  <4>  pop edx
    24 00000163 59                  <4>  pop ecx
    25 00000164 5B                  <4>  pop ebx
    26 00000165 58                  <4>  pop eax
    27 00000166 CD80                <4>  int 0x80
    28 00000168 5B                  <4>  pop ebx
    29 00000169 59                  <4>  pop ecx
    30 0000016A 5A                  <4>  pop edx
    98 0000016B 83C402              <2>  add esp, 2
    99 0000016E 9D                  <2>  popf
   100 0000016F 61                  <2>  popa
   161 00000170 89D7                <1>  mov edi,edx
   162 00000172 31D2                <1>  xor edx,edx
   163 00000174 89D8                <1>  mov eax,ebx
   164 00000176 F7F6                <1>  div esi
   165 00000178 83F801              <1>  cmp eax,1
   166 0000017B 7404                <1>  je %%m4
   167 0000017D 89C3                <1>  mov ebx,eax
   168 0000017F EBC5                <1>  jmp %%m3
   169                              <1>  %%m4:
   170 00000181 89FA                <1>  mov edx,edi
   171 00000183 80C230              <1>  add dl,'0'
   172                              <1>  PUTCHAR dl
    69 00000186 60                  <2>  pusha
    70 00000187 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88 00000188 88D0                <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 0000018A 83EC02              <2>  sub esp, 2
    95 0000018D 89E7                <2>  mov edi, esp
    96 0000018F 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000191 52                  <4>  push edx
    17 00000192 51                  <4>  push ecx
    18 00000193 53                  <4>  push ebx
    19 00000194 6A04                <4>  push %1
    20 00000196 6A01                <4>  push %2
    21 00000198 57                  <4>  push %3
    22 00000199 6A01                <4>  push %4
    23 0000019B 5A                  <4>  pop edx
    24 0000019C 59                  <4>  pop ecx
    25 0000019D 5B                  <4>  pop ebx
    26 0000019E 58                  <4>  pop eax
    27 0000019F CD80                <4>  int 0x80
    28 000001A1 5B                  <4>  pop ebx
    29 000001A2 59                  <4>  pop ecx
    30 000001A3 5A                  <4>  pop edx
    98 000001A4 83C402              <2>  add esp, 2
    99 000001A7 9D                  <2>  popf
   100 000001A8 61                  <2>  popa
   173                              <1> 
   174                              <1> 
   175 000001A9 9D                  <1> popf
   176 000001AA 61                  <1> popa
    73                                      PUTCHAR '|'
    69 000001AB 60                  <1>  pusha
    70 000001AC 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72 000001AD B07C                <1>  mov al, %1
    73                              <1> %elifnum %1
    74                              <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000001AF 83EC02              <1>  sub esp, 2
    95 000001B2 89E7                <1>  mov edi, esp
    96 000001B4 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000001B6 52                  <3>  push edx
    17 000001B7 51                  <3>  push ecx
    18 000001B8 53                  <3>  push ebx
    19 000001B9 6A04                <3>  push %1
    20 000001BB 6A01                <3>  push %2
    21 000001BD 57                  <3>  push %3
    22 000001BE 6A01                <3>  push %4
    23 000001C0 5A                  <3>  pop edx
    24 000001C1 59                  <3>  pop ecx
    25 000001C2 5B                  <3>  pop ebx
    26 000001C3 58                  <3>  pop eax
    27 000001C4 CD80                <3>  int 0x80
    28 000001C6 5B                  <3>  pop ebx
    29 000001C7 59                  <3>  pop ecx
    30 000001C8 5A                  <3>  pop edx
    98 000001C9 83C402              <1>  add esp, 2
    99 000001CC 9D                  <1>  popf
   100 000001CD 61                  <1>  popa
    74 000001CE 83ED04                      sub ebp, 4
    75 000001D1 E305                        jecxz stop_2
    76 000001D3 E941FFFFFF                  jmp print_stack_2
    77                                      
    78                                  stop_2:
    79                                      PUTCHAR 0xA
    69 000001D8 60                  <1>  pusha
    70 000001D9 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72                              <1>  mov al, %1
    73                              <1> %elifnum %1
    74 000001DA B00A                <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000001DC 83EC02              <1>  sub esp, 2
    95 000001DF 89E7                <1>  mov edi, esp
    96 000001E1 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000001E3 52                  <3>  push edx
    17 000001E4 51                  <3>  push ecx
    18 000001E5 53                  <3>  push ebx
    19 000001E6 6A04                <3>  push %1
    20 000001E8 6A01                <3>  push %2
    21 000001EA 57                  <3>  push %3
    22 000001EB 6A01                <3>  push %4
    23 000001ED 5A                  <3>  pop edx
    24 000001EE 59                  <3>  pop ecx
    25 000001EF 5B                  <3>  pop ebx
    26 000001F0 58                  <3>  pop eax
    27 000001F1 CD80                <3>  int 0x80
    28 000001F3 5B                  <3>  pop ebx
    29 000001F4 59                  <3>  pop ecx
    30 000001F5 5A                  <3>  pop edx
    98 000001F6 83C402              <1>  add esp, 2
    99 000001F9 9D                  <1>  popf
   100 000001FA 61                  <1>  popa
    80                                  
    81                                      FINISH
   126                              <1>  _syscall_exit %1
    35 000001FB BB00000000          <2>  mov ebx, %1
    36 00000200 B801000000          <2>  mov eax, 1
    37 00000205 CD80                <2>  int 0x80
