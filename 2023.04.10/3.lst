     1                                  %include "../st_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> ;; file changed, macros added (by Divari I.N.,
     9                              <1> ;; Department of computer science, MIPT, 2019-2020) 
    10                              <1> 
    11                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                              <1> ;; system dependend part
    13                              <1> 
    14                              <1> ; generic 3-param syscall
    15                              <1> %macro _syscall_3 4
    16                              <1> 	push edx
    17                              <1> 	push ecx
    18                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    19                              <1> 	push %1
    20                              <1> 	push %2
    21                              <1> 	push %3
    22                              <1> 	push %4
    23                              <1> 	pop edx
    24                              <1> 	pop ecx
    25                              <1> 	pop ebx
    26                              <1> 	pop eax 
    27                              <1> 	int 0x80
    28                              <1> 	pop ebx
    29                              <1> 	pop ecx
    30                              <1> 	pop edx
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    34                              <1> %macro _syscall_exit 1
    35                              <1> 	mov ebx, %1	; exit code
    36                              <1> 	mov eax, 1	; 1 = sys_exit
    37                              <1> 	int 0x80
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> ;; system dependent part ends here
    41                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                              <1> 
    43                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    44                              <1> ; output: eax: read bytes
    45                              <1> %macro _syscall_read 3
    46                              <1> 	_syscall_3 3,%1,%2,%3
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    50                              <1> ; output: eax: written bytes
    51                              <1> %macro _syscall_write 3
    52                              <1> 	_syscall_3 4,%1,%2,%3
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    56                              <1> %macro 	PRINT 1
    57                              <1> 	pusha
    58                              <1> 	pushf
    59                              <1> 	jmp %%astr
    60                              <1> %%str	db	%1, 0
    61                              <1> %%strln	equ	$-%%str
    62                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    63                              <1> 	popf
    64                              <1> 	popa
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    68                              <1> %macro	PUTCHAR 1
    69                              <1> 	pusha
    70                              <1> 	pushf
    71                              <1> %ifstr %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifnum %1
    74                              <1> 	mov	al, %1
    75                              <1> %elifidni %1,al
    76                              <1> 	nop
    77                              <1> %elifidni %1,ah
    78                              <1> 	mov	al, ah
    79                              <1> %elifidni %1,bl
    80                              <1> 	mov	al, bl
    81                              <1> %elifidni %1,bh
    82                              <1> 	mov	al, bh
    83                              <1> %elifidni %1,cl
    84                              <1> 	mov	al, cl
    85                              <1> %elifidni %1,ch
    86                              <1> 	mov	al, ch
    87                              <1> %elifidni %1,dl
    88                              <1> 	mov	al, dl
    89                              <1> %elifidni %1,dh
    90                              <1> 	mov	al, dh
    91                              <1> %else
    92                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    93                              <1> %endif
    94                              <1> 	sub	esp, 2  ; reserve memory for buffer
    95                              <1> 	mov	edi, esp
    96                              <1> 	mov	[edi], al
    97                              <1> 	_syscall_write 1, edi, 1
    98                              <1> 	add	esp, 2
    99                              <1> 	popf
   100                              <1> 	popa
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   104                              <1> %macro	GETCHAR 0
   105                              <1> 	pushf
   106                              <1> 	push	edi
   107                              <1> 	sub	esp, 2
   108                              <1> 	mov	edi, esp
   109                              <1> 	_syscall_read 0, edi, 1
   110                              <1> 	cmp	eax, 1
   111                              <1> 	jne	%%eof_reached
   112                              <1> 	xor	eax,eax
   113                              <1> 	mov	al, [edi]
   114                              <1> 	jmp	%%gcquit
   115                              <1> %%eof_reached:
   116                              <1> 	xor	eax, eax
   117                              <1> 	not	eax 		; eax := -1
   118                              <1> %%gcquit:
   119                              <1> 	add	esp, 2
   120                              <1> 	pop	edi
   121                              <1> 	popf
   122                              <1> %endmacro
   123                              <1> 
   124                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   125                              <1> %macro FINISH 0-1 0
   126                              <1> 	_syscall_exit %1
   127                              <1> %endmacro
   128                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   129                              <1> %macro UNSINT 1
   130                              <1> pusha
   131                              <1> pushf
   132                              <1> push dword %1
   133                              <1> pop eax
   134                              <1> mov edi,eax
   135                              <1> mov esi,10
   136                              <1>   xor ebx,ebx
   137                              <1> %%m1:
   138                              <1>    xor edx,edx
   139                              <1>    div esi
   140                              <1>    inc ebx
   141                              <1>    cmp eax,0
   142                              <1>    jne %%m1
   143                              <1>     
   144                              <1>    mov eax,1
   145                              <1>    mov ecx,ebx
   146                              <1>    dec ecx
   147                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   148                              <1>     cmp ecx,0
   149                              <1>      je %%m4
   150                              <1> %%m2:  mul esi
   151                              <1>        loop %%m2
   152                              <1> 
   153                              <1>        mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:       
   156                              <1>       mov eax,edi 
   157                              <1>       xor edx,edx 
   158                              <1>       div ebx
   159                              <1>       add al,'0'
   160                              <1>       PUTCHAR al
   161                              <1>       mov edi,edx
   162                              <1>       xor edx,edx
   163                              <1>       mov eax,ebx
   164                              <1>       div esi
   165                              <1>       cmp eax,1
   166                              <1>       je %%m4
   167                              <1>       mov ebx,eax
   168                              <1>       jmp %%m3
   169                              <1>  %%m4:      
   170                              <1>       mov edx,edi
   171                              <1>       add dl,'0'
   172                              <1>       PUTCHAR dl
   173                              <1>        
   174                              <1>   
   175                              <1> popf
   176                              <1> popa
   177                              <1> %endmacro
   178                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179                              <1> %macro SIGNINT 1
   180                              <1> pusha
   181                              <1> pushf
   182                              <1> push dword %1
   183                              <1> pop eax
   184                              <1>     cmp eax,0
   185                              <1>     jge %%m5
   186                              <1>     PUTCHAR '-'
   187                              <1>     neg eax
   188                              <1> %%m5:
   189                              <1>       UNSINT eax
   190                              <1> popf
   191                              <1> popa
   192                              <1> %endmacro
   193                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   194                              <1> %macro GETUN 1
   195                              <1> pushad
   196                              <1> pushfd
   197                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   198                              <1> xor edi,edi
   199                              <1> xor esi,esi
   200                              <1> %%m1:
   201                              <1> GETCHAR
   202                              <1> cmp al,0xA
   203                              <1> je %%m2
   204                              <1> cmp al,'0'
   205                              <1> jb %%m_err
   206                              <1> cmp al,'9'
   207                              <1> ja %%m_err
   208                              <1> inc edi
   209                              <1> xor ecx,ecx
   210                              <1> mov cl,al
   211                              <1> mov eax,esi
   212                              <1> mov ebx,10
   213                              <1> mul ebx
   214                              <1> sub cl,48
   215                              <1> add eax,ecx
   216                              <1> jc %%m3
   217                              <1> mov esi,eax
   218                              <1> jmp %%m1
   219                              <1> %%m2: 
   220                              <1> cmp edi,0
   221                              <1> je %%m1
   222                              <1> jmp %%m4
   223                              <1> %%m3: PRINT "too big number"
   224                              <1> PUTCHAR 10
   225                              <1> jmp %%m4
   226                              <1> %%m_err: PRINT "ERROR!!!"
   227                              <1> PUTCHAR 0xa
   228                              <1> %%m4:
   229                              <1> ;;;;;;;;;;;;;;;;;;
   230                              <1> push esi
   231                              <1> add esp,4
   232                              <1> popfd
   233                              <1> popad
   234                              <1> sub esp,40
   235                              <1> pop dword %1
   236                              <1> add esp,36
   237                              <1> %endmacro
   238                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   239                              <1> %macro GETSIG 1
   240                              <1> pushad
   241                              <1> pushfd
   242                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   243                              <1> xor edi,edi
   244                              <1> xor esi,esi
   245                              <1> mov ebx,10
   246                              <1> %%m_st1: GETCHAR
   247                              <1> cmp al,0xa
   248                              <1> je %%m_st1
   249                              <1> cmp al,'-'
   250                              <1> jne %%s1
   251                              <1> mov ebx,-10
   252                              <1> push ebx
   253                              <1> GETCHAR
   254                              <1> cmp al,0xa
   255                              <1> je %%m_err
   256                              <1> jmp %%m_st21
   257                              <1> %%s1: push ebx 
   258                              <1> cmp al,'+'
   259                              <1> jne %%m_st21
   260                              <1> GETCHAR 
   261                              <1> cmp al,0xa
   262                              <1> je %%m_err
   263                              <1> jmp %%m_st21
   264                              <1> %%m_st2: GETCHAR
   265                              <1> %%m_st21:  cmp al,0xa
   266                              <1> je %%pr_end
   267                              <1> cmp al,'0'
   268                              <1> jb %%m_err
   269                              <1> cmp al,'9'
   270                              <1> ja %%m_err
   271                              <1> inc edi
   272                              <1> xor ecx,ecx
   273                              <1> mov cl,al
   274                              <1> mov eax,esi
   275                              <1> imul ebx
   276                              <1> sub cl,48
   277                              <1> cmp dword[esp],-10
   278                              <1> je %%j_s
   279                              <1> add eax,ecx
   280                              <1> jmp %%j_per
   281                              <1> %%j_s: sub eax,ecx
   282                              <1> %%j_per: jo %%m_b
   283                              <1> mov esi,eax
   284                              <1> cmp dword[esp],-10
   285                              <1> jne %%m_st2
   286                              <1> neg esi
   287                              <1> jmp %%m_st2
   288                              <1> %%pr_end:  cmp edi,0
   289                              <1> je %%m_st2
   290                              <1> jmp %%m_k
   291                              <1> ;;;;;;;;;
   292                              <1> %%m_err: pop ebx 
   293                              <1> PRINT "ERROR"
   294                              <1> PUTCHAR 0xa
   295                              <1> jmp %%m_end
   296                              <1> %%m_b: pop ebx 
   297                              <1> cmp ebx,-10
   298                              <1> je  %%m_l
   299                              <1> PRINT "too big"
   300                              <1> PUTCHAR 0xa
   301                              <1> jmp %%m_end
   302                              <1> %%m_l: PRINT "too less"
   303                              <1> PUTCHAR 0xa
   304                              <1> jmp %%m_end
   305                              <1> %%m_k: pop ebx
   306                              <1> cmp ebx,-10
   307                              <1> jne %%m_p
   308                              <1> neg esi 
   309                              <1> %%m_p: 
   310                              <1> 
   311                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   312                              <1> 
   313                              <1> push esi
   314                              <1> add esp,4
   315                              <1> popfd
   316                              <1> popad
   317                              <1> sub esp,40
   318                              <1> pop dword %1
   319                              <1> add esp,36
   320                              <1> jmp %%mm_e
   321                              <1> %%m_end:
   322                              <1> popfd
   323                              <1> popad
   324                              <1> %%mm_e:
   325                              <1> %endmacro
   326                              <1> 
   327                              <1> 
   328                              <1> 
   329                              <1> 
     2                                  
     3                                  global _start
     4                                  
     5                                  section .data
     6                                  
     7                                  section .bss
     8 00000000 ????????                    tmp resd 1
     9                                  
    10                                  section .text
    11                                  
    12                                  _start:
    13 00000000 B800000000                  mov eax, 0
    14 00000005 50                          push eax
    15                                      
    16 00000006 40                          inc eax
    17 00000007 50                          push eax
    18                                  
    19 00000008 40                          inc eax
    20 00000009 50                          push eax
    21                                  
    22 0000000A 40                          inc eax
    23 0000000B 50                          push eax
    24                                  
    25 0000000C 40                          inc eax
    26 0000000D 6A00                        push 0
    27                                  
    28 0000000F 40                          inc eax
    29 00000010 50                          push eax
    30                                  
    31 00000011 40                          inc eax
    32 00000012 6A00                        push 0
    33                                  
    34 00000014 40                          inc eax
    35 00000015 6A00                        push 0
    36                                  
    37 00000017 40                          inc eax
    38 00000018 50                          push eax
    39                                  
    40 00000019 40                          inc eax
    41 0000001A 50                          push eax
    42                                  
    43 0000001B B90A000000                  mov ecx, 10
    44 00000020 89E5                        mov ebp, esp
    45 00000022 83C524                      add ebp, 36
    46                                  
    47                                  print_stack_1:
    48 00000025 49                          dec ecx
    49                                      UNSINT [ebp]
   130 00000026 60                  <1> pusha
   131 00000027 9C                  <1> pushf
   132 00000028 FF7500              <1> push dword %1
   133 0000002B 58                  <1> pop eax
   134 0000002C 89C7                <1> mov edi,eax
   135 0000002E BE0A000000          <1> mov esi,10
   136 00000033 31DB                <1>  xor ebx,ebx
   137                              <1> %%m1:
   138 00000035 31D2                <1>  xor edx,edx
   139 00000037 F7F6                <1>  div esi
   140 00000039 43                  <1>  inc ebx
   141 0000003A 83F800              <1>  cmp eax,0
   142 0000003D 75F6                <1>  jne %%m1
   143                              <1> 
   144 0000003F B801000000          <1>  mov eax,1
   145 00000044 89D9                <1>  mov ecx,ebx
   146 00000046 49                  <1>  dec ecx
   147                              <1> 
   148 00000047 83F900              <1>  cmp ecx,0
   149 0000004A 7441                <1>  je %%m4
   150 0000004C F7E6                <1> %%m2: mul esi
   151 0000004E E2FC                <1>  loop %%m2
   152                              <1> 
   153 00000050 89C3                <1>  mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:
   156 00000052 89F8                <1>  mov eax,edi
   157 00000054 31D2                <1>  xor edx,edx
   158 00000056 F7F3                <1>  div ebx
   159 00000058 0430                <1>  add al,'0'
   160                              <1>  PUTCHAR al
    69 0000005A 60                  <2>  pusha
    70 0000005B 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76 0000005C 90                  <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 0000005D 83EC02              <2>  sub esp, 2
    95 00000060 89E7                <2>  mov edi, esp
    96 00000062 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000064 52                  <4>  push edx
    17 00000065 51                  <4>  push ecx
    18 00000066 53                  <4>  push ebx
    19 00000067 6A04                <4>  push %1
    20 00000069 6A01                <4>  push %2
    21 0000006B 57                  <4>  push %3
    22 0000006C 6A01                <4>  push %4
    23 0000006E 5A                  <4>  pop edx
    24 0000006F 59                  <4>  pop ecx
    25 00000070 5B                  <4>  pop ebx
    26 00000071 58                  <4>  pop eax
    27 00000072 CD80                <4>  int 0x80
    28 00000074 5B                  <4>  pop ebx
    29 00000075 59                  <4>  pop ecx
    30 00000076 5A                  <4>  pop edx
    98 00000077 83C402              <2>  add esp, 2
    99 0000007A 9D                  <2>  popf
   100 0000007B 61                  <2>  popa
   161 0000007C 89D7                <1>  mov edi,edx
   162 0000007E 31D2                <1>  xor edx,edx
   163 00000080 89D8                <1>  mov eax,ebx
   164 00000082 F7F6                <1>  div esi
   165 00000084 83F801              <1>  cmp eax,1
   166 00000087 7404                <1>  je %%m4
   167 00000089 89C3                <1>  mov ebx,eax
   168 0000008B EBC5                <1>  jmp %%m3
   169                              <1>  %%m4:
   170 0000008D 89FA                <1>  mov edx,edi
   171 0000008F 80C230              <1>  add dl,'0'
   172                              <1>  PUTCHAR dl
    69 00000092 60                  <2>  pusha
    70 00000093 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88 00000094 88D0                <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 00000096 83EC02              <2>  sub esp, 2
    95 00000099 89E7                <2>  mov edi, esp
    96 0000009B 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 0000009D 52                  <4>  push edx
    17 0000009E 51                  <4>  push ecx
    18 0000009F 53                  <4>  push ebx
    19 000000A0 6A04                <4>  push %1
    20 000000A2 6A01                <4>  push %2
    21 000000A4 57                  <4>  push %3
    22 000000A5 6A01                <4>  push %4
    23 000000A7 5A                  <4>  pop edx
    24 000000A8 59                  <4>  pop ecx
    25 000000A9 5B                  <4>  pop ebx
    26 000000AA 58                  <4>  pop eax
    27 000000AB CD80                <4>  int 0x80
    28 000000AD 5B                  <4>  pop ebx
    29 000000AE 59                  <4>  pop ecx
    30 000000AF 5A                  <4>  pop edx
    98 000000B0 83C402              <2>  add esp, 2
    99 000000B3 9D                  <2>  popf
   100 000000B4 61                  <2>  popa
   173                              <1> 
   174                              <1> 
   175 000000B5 9D                  <1> popf
   176 000000B6 61                  <1> popa
    50                                      PUTCHAR '|'
    69 000000B7 60                  <1>  pusha
    70 000000B8 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72 000000B9 B07C                <1>  mov al, %1
    73                              <1> %elifnum %1
    74                              <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000000BB 83EC02              <1>  sub esp, 2
    95 000000BE 89E7                <1>  mov edi, esp
    96 000000C0 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000000C2 52                  <3>  push edx
    17 000000C3 51                  <3>  push ecx
    18 000000C4 53                  <3>  push ebx
    19 000000C5 6A04                <3>  push %1
    20 000000C7 6A01                <3>  push %2
    21 000000C9 57                  <3>  push %3
    22 000000CA 6A01                <3>  push %4
    23 000000CC 5A                  <3>  pop edx
    24 000000CD 59                  <3>  pop ecx
    25 000000CE 5B                  <3>  pop ebx
    26 000000CF 58                  <3>  pop eax
    27 000000D0 CD80                <3>  int 0x80
    28 000000D2 5B                  <3>  pop ebx
    29 000000D3 59                  <3>  pop ecx
    30 000000D4 5A                  <3>  pop edx
    98 000000D5 83C402              <1>  add esp, 2
    99 000000D8 9D                  <1>  popf
   100 000000D9 61                  <1>  popa
    51 000000DA 83ED04                      sub ebp, 4
    52 000000DD E305                        jecxz stop_1
    53 000000DF E941FFFFFF                  jmp print_stack_1
    54                                      
    55                                  stop_1:
    56                                      PUTCHAR 0xA
    69 000000E4 60                  <1>  pusha
    70 000000E5 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72                              <1>  mov al, %1
    73                              <1> %elifnum %1
    74 000000E6 B00A                <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000000E8 83EC02              <1>  sub esp, 2
    95 000000EB 89E7                <1>  mov edi, esp
    96 000000ED 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000000EF 52                  <3>  push edx
    17 000000F0 51                  <3>  push ecx
    18 000000F1 53                  <3>  push ebx
    19 000000F2 6A04                <3>  push %1
    20 000000F4 6A01                <3>  push %2
    21 000000F6 57                  <3>  push %3
    22 000000F7 6A01                <3>  push %4
    23 000000F9 5A                  <3>  pop edx
    24 000000FA 59                  <3>  pop ecx
    25 000000FB 5B                  <3>  pop ebx
    26 000000FC 58                  <3>  pop eax
    27 000000FD CD80                <3>  int 0x80
    28 000000FF 5B                  <3>  pop ebx
    29 00000100 59                  <3>  pop ecx
    30 00000101 5A                  <3>  pop edx
    98 00000102 83C402              <1>  add esp, 2
    99 00000105 9D                  <1>  popf
   100 00000106 61                  <1>  popa
    57                                  
    58 00000107 B90A000000                  mov ecx, 10
    59 0000010C 89E5                        mov ebp, esp
    60 0000010E 83ED04                      sub ebp, 4
    61 00000111 BA00000000                  mov edx, 0
    62                                  
    63                                  find_zero:
    64 00000116 49                          dec ecx
    65 00000117 E3BA                        jecxz done
    65          ******************       error: short jump is out of range
    65          ******************       warning: byte data exceeds bounds [-w+number-overflow]
    66 00000119 83C504                      add ebp, 4
    67                                  
    68 0000011C 395500                      cmp [ebp], edx
    69 0000011F 75F5                        jne find_zero
    70                                  
    71 00000121 BB09000000                  mov ebx, 9
    72 00000126 29CB                        sub ebx, ecx
    73 00000128 83C301                      add ebx, 1
    74 0000012B 89E5                        mov ebp, esp
    75 0000012D EB00                        jmp remove_zero
    76                                  
    77                                  remove_zero:
    78 0000012F 50                          push eax
    79                                  
    80                                  cycle:
    81                                      UNSINT eax
   130 00000130 60                  <1> pusha
   131 00000131 9C                  <1> pushf
   132 00000132 50                  <1> push dword %1
   133 00000133 58                  <1> pop eax
   134 00000134 89C7                <1> mov edi,eax
   135 00000136 BE0A000000          <1> mov esi,10
   136 0000013B 31DB                <1>  xor ebx,ebx
   137                              <1> %%m1:
   138 0000013D 31D2                <1>  xor edx,edx
   139 0000013F F7F6                <1>  div esi
   140 00000141 43                  <1>  inc ebx
   141 00000142 83F800              <1>  cmp eax,0
   142 00000145 75F6                <1>  jne %%m1
   143                              <1> 
   144 00000147 B801000000          <1>  mov eax,1
   145 0000014C 89D9                <1>  mov ecx,ebx
   146 0000014E 49                  <1>  dec ecx
   147                              <1> 
   148 0000014F 83F900              <1>  cmp ecx,0
   149 00000152 7441                <1>  je %%m4
   150 00000154 F7E6                <1> %%m2: mul esi
   151 00000156 E2FC                <1>  loop %%m2
   152                              <1> 
   153 00000158 89C3                <1>  mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:
   156 0000015A 89F8                <1>  mov eax,edi
   157 0000015C 31D2                <1>  xor edx,edx
   158 0000015E F7F3                <1>  div ebx
   159 00000160 0430                <1>  add al,'0'
   160                              <1>  PUTCHAR al
    69 00000162 60                  <2>  pusha
    70 00000163 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76 00000164 90                  <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 00000165 83EC02              <2>  sub esp, 2
    95 00000168 89E7                <2>  mov edi, esp
    96 0000016A 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 0000016C 52                  <4>  push edx
    17 0000016D 51                  <4>  push ecx
    18 0000016E 53                  <4>  push ebx
    19 0000016F 6A04                <4>  push %1
    20 00000171 6A01                <4>  push %2
    21 00000173 57                  <4>  push %3
    22 00000174 6A01                <4>  push %4
    23 00000176 5A                  <4>  pop edx
    24 00000177 59                  <4>  pop ecx
    25 00000178 5B                  <4>  pop ebx
    26 00000179 58                  <4>  pop eax
    27 0000017A CD80                <4>  int 0x80
    28 0000017C 5B                  <4>  pop ebx
    29 0000017D 59                  <4>  pop ecx
    30 0000017E 5A                  <4>  pop edx
    98 0000017F 83C402              <2>  add esp, 2
    99 00000182 9D                  <2>  popf
   100 00000183 61                  <2>  popa
   161 00000184 89D7                <1>  mov edi,edx
   162 00000186 31D2                <1>  xor edx,edx
   163 00000188 89D8                <1>  mov eax,ebx
   164 0000018A F7F6                <1>  div esi
   165 0000018C 83F801              <1>  cmp eax,1
   166 0000018F 7404                <1>  je %%m4
   167 00000191 89C3                <1>  mov ebx,eax
   168 00000193 EBC5                <1>  jmp %%m3
   169                              <1>  %%m4:
   170 00000195 89FA                <1>  mov edx,edi
   171 00000197 80C230              <1>  add dl,'0'
   172                              <1>  PUTCHAR dl
    69 0000019A 60                  <2>  pusha
    70 0000019B 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88 0000019C 88D0                <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 0000019E 83EC02              <2>  sub esp, 2
    95 000001A1 89E7                <2>  mov edi, esp
    96 000001A3 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 000001A5 52                  <4>  push edx
    17 000001A6 51                  <4>  push ecx
    18 000001A7 53                  <4>  push ebx
    19 000001A8 6A04                <4>  push %1
    20 000001AA 6A01                <4>  push %2
    21 000001AC 57                  <4>  push %3
    22 000001AD 6A01                <4>  push %4
    23 000001AF 5A                  <4>  pop edx
    24 000001B0 59                  <4>  pop ecx
    25 000001B1 5B                  <4>  pop ebx
    26 000001B2 58                  <4>  pop eax
    27 000001B3 CD80                <4>  int 0x80
    28 000001B5 5B                  <4>  pop ebx
    29 000001B6 59                  <4>  pop ecx
    30 000001B7 5A                  <4>  pop edx
    98 000001B8 83C402              <2>  add esp, 2
    99 000001BB 9D                  <2>  popf
   100 000001BC 61                  <2>  popa
   173                              <1> 
   174                              <1> 
   175 000001BD 9D                  <1> popf
   176 000001BE 61                  <1> popa
    82 000001BF 4B                          dec ebx
    83 000001C0 83C504                      add ebp, 4
    84 000001C3 874500                      xchg [ebp], eax
    85 000001C6 39D3                        cmp ebx, edx
    86 000001C8 0F8562FFFFFF                jne cycle
    87                                  
    88 000001CE E943FFFFFF                  jmp find_zero
    89                                  
    90                                  done:
    91 000001D3 B90A000000                  mov ecx, 10
    92 000001D8 89E5                        mov ebp, esp
    93 000001DA 83C524                      add ebp, 36
    94                                  
    95                                  print_stack_2:
    96 000001DD 49                          dec ecx
    97                                      UNSINT [ebp]
   130 000001DE 60                  <1> pusha
   131 000001DF 9C                  <1> pushf
   132 000001E0 FF7500              <1> push dword %1
   133 000001E3 58                  <1> pop eax
   134 000001E4 89C7                <1> mov edi,eax
   135 000001E6 BE0A000000          <1> mov esi,10
   136 000001EB 31DB                <1>  xor ebx,ebx
   137                              <1> %%m1:
   138 000001ED 31D2                <1>  xor edx,edx
   139 000001EF F7F6                <1>  div esi
   140 000001F1 43                  <1>  inc ebx
   141 000001F2 83F800              <1>  cmp eax,0
   142 000001F5 75F6                <1>  jne %%m1
   143                              <1> 
   144 000001F7 B801000000          <1>  mov eax,1
   145 000001FC 89D9                <1>  mov ecx,ebx
   146 000001FE 49                  <1>  dec ecx
   147                              <1> 
   148 000001FF 83F900              <1>  cmp ecx,0
   149 00000202 7441                <1>  je %%m4
   150 00000204 F7E6                <1> %%m2: mul esi
   151 00000206 E2FC                <1>  loop %%m2
   152                              <1> 
   153 00000208 89C3                <1>  mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:
   156 0000020A 89F8                <1>  mov eax,edi
   157 0000020C 31D2                <1>  xor edx,edx
   158 0000020E F7F3                <1>  div ebx
   159 00000210 0430                <1>  add al,'0'
   160                              <1>  PUTCHAR al
    69 00000212 60                  <2>  pusha
    70 00000213 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76 00000214 90                  <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 00000215 83EC02              <2>  sub esp, 2
    95 00000218 89E7                <2>  mov edi, esp
    96 0000021A 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 0000021C 52                  <4>  push edx
    17 0000021D 51                  <4>  push ecx
    18 0000021E 53                  <4>  push ebx
    19 0000021F 6A04                <4>  push %1
    20 00000221 6A01                <4>  push %2
    21 00000223 57                  <4>  push %3
    22 00000224 6A01                <4>  push %4
    23 00000226 5A                  <4>  pop edx
    24 00000227 59                  <4>  pop ecx
    25 00000228 5B                  <4>  pop ebx
    26 00000229 58                  <4>  pop eax
    27 0000022A CD80                <4>  int 0x80
    28 0000022C 5B                  <4>  pop ebx
    29 0000022D 59                  <4>  pop ecx
    30 0000022E 5A                  <4>  pop edx
    98 0000022F 83C402              <2>  add esp, 2
    99 00000232 9D                  <2>  popf
   100 00000233 61                  <2>  popa
   161 00000234 89D7                <1>  mov edi,edx
   162 00000236 31D2                <1>  xor edx,edx
   163 00000238 89D8                <1>  mov eax,ebx
   164 0000023A F7F6                <1>  div esi
   165 0000023C 83F801              <1>  cmp eax,1
   166 0000023F 7404                <1>  je %%m4
   167 00000241 89C3                <1>  mov ebx,eax
   168 00000243 EBC5                <1>  jmp %%m3
   169                              <1>  %%m4:
   170 00000245 89FA                <1>  mov edx,edi
   171 00000247 80C230              <1>  add dl,'0'
   172                              <1>  PUTCHAR dl
    69 0000024A 60                  <2>  pusha
    70 0000024B 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74                              <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88 0000024C 88D0                <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 0000024E 83EC02              <2>  sub esp, 2
    95 00000251 89E7                <2>  mov edi, esp
    96 00000253 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000255 52                  <4>  push edx
    17 00000256 51                  <4>  push ecx
    18 00000257 53                  <4>  push ebx
    19 00000258 6A04                <4>  push %1
    20 0000025A 6A01                <4>  push %2
    21 0000025C 57                  <4>  push %3
    22 0000025D 6A01                <4>  push %4
    23 0000025F 5A                  <4>  pop edx
    24 00000260 59                  <4>  pop ecx
    25 00000261 5B                  <4>  pop ebx
    26 00000262 58                  <4>  pop eax
    27 00000263 CD80                <4>  int 0x80
    28 00000265 5B                  <4>  pop ebx
    29 00000266 59                  <4>  pop ecx
    30 00000267 5A                  <4>  pop edx
    98 00000268 83C402              <2>  add esp, 2
    99 0000026B 9D                  <2>  popf
   100 0000026C 61                  <2>  popa
   173                              <1> 
   174                              <1> 
   175 0000026D 9D                  <1> popf
   176 0000026E 61                  <1> popa
    98                                      PUTCHAR '|'
    69 0000026F 60                  <1>  pusha
    70 00000270 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72 00000271 B07C                <1>  mov al, %1
    73                              <1> %elifnum %1
    74                              <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 00000273 83EC02              <1>  sub esp, 2
    95 00000276 89E7                <1>  mov edi, esp
    96 00000278 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 0000027A 52                  <3>  push edx
    17 0000027B 51                  <3>  push ecx
    18 0000027C 53                  <3>  push ebx
    19 0000027D 6A04                <3>  push %1
    20 0000027F 6A01                <3>  push %2
    21 00000281 57                  <3>  push %3
    22 00000282 6A01                <3>  push %4
    23 00000284 5A                  <3>  pop edx
    24 00000285 59                  <3>  pop ecx
    25 00000286 5B                  <3>  pop ebx
    26 00000287 58                  <3>  pop eax
    27 00000288 CD80                <3>  int 0x80
    28 0000028A 5B                  <3>  pop ebx
    29 0000028B 59                  <3>  pop ecx
    30 0000028C 5A                  <3>  pop edx
    98 0000028D 83C402              <1>  add esp, 2
    99 00000290 9D                  <1>  popf
   100 00000291 61                  <1>  popa
    99 00000292 83ED04                      sub ebp, 4
   100 00000295 E305                        jecxz stop_2
   101 00000297 E941FFFFFF                  jmp print_stack_2
   102                                      
   103                                  stop_2:
   104                                      PUTCHAR 0xA
    69 0000029C 60                  <1>  pusha
    70 0000029D 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72                              <1>  mov al, %1
    73                              <1> %elifnum %1
    74 0000029E B00A                <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 000002A0 83EC02              <1>  sub esp, 2
    95 000002A3 89E7                <1>  mov edi, esp
    96 000002A5 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000002A7 52                  <3>  push edx
    17 000002A8 51                  <3>  push ecx
    18 000002A9 53                  <3>  push ebx
    19 000002AA 6A04                <3>  push %1
    20 000002AC 6A01                <3>  push %2
    21 000002AE 57                  <3>  push %3
    22 000002AF 6A01                <3>  push %4
    23 000002B1 5A                  <3>  pop edx
    24 000002B2 59                  <3>  pop ecx
    25 000002B3 5B                  <3>  pop ebx
    26 000002B4 58                  <3>  pop eax
    27 000002B5 CD80                <3>  int 0x80
    28 000002B7 5B                  <3>  pop ebx
    29 000002B8 59                  <3>  pop ecx
    30 000002B9 5A                  <3>  pop edx
    98 000002BA 83C402              <1>  add esp, 2
    99 000002BD 9D                  <1>  popf
   100 000002BE 61                  <1>  popa
   105                                  
   106                                      FINISH
   126                              <1>  _syscall_exit %1
    35 000002BF BB00000000          <2>  mov ebx, %1
    36 000002C4 B801000000          <2>  mov eax, 1
    37 000002C9 CD80                <2>  int 0x80
