     1                                  %include "../st_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> ;; file changed, macros added (by Divari I.N.,
     9                              <1> ;; Department of computer science, MIPT, 2019-2020) 
    10                              <1> 
    11                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                              <1> ;; system dependend part
    13                              <1> 
    14                              <1> ; generic 3-param syscall
    15                              <1> %macro _syscall_3 4
    16                              <1> 	push edx
    17                              <1> 	push ecx
    18                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    19                              <1> 	push %1
    20                              <1> 	push %2
    21                              <1> 	push %3
    22                              <1> 	push %4
    23                              <1> 	pop edx
    24                              <1> 	pop ecx
    25                              <1> 	pop ebx
    26                              <1> 	pop eax 
    27                              <1> 	int 0x80
    28                              <1> 	pop ebx
    29                              <1> 	pop ecx
    30                              <1> 	pop edx
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    34                              <1> %macro _syscall_exit 1
    35                              <1> 	mov ebx, %1	; exit code
    36                              <1> 	mov eax, 1	; 1 = sys_exit
    37                              <1> 	int 0x80
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> ;; system dependent part ends here
    41                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                              <1> 
    43                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    44                              <1> ; output: eax: read bytes
    45                              <1> %macro _syscall_read 3
    46                              <1> 	_syscall_3 3,%1,%2,%3
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    50                              <1> ; output: eax: written bytes
    51                              <1> %macro _syscall_write 3
    52                              <1> 	_syscall_3 4,%1,%2,%3
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    56                              <1> %macro 	PRINT 1
    57                              <1> 	pusha
    58                              <1> 	pushf
    59                              <1> 	jmp %%astr
    60                              <1> %%str	db	%1, 0
    61                              <1> %%strln	equ	$-%%str
    62                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    63                              <1> 	popf
    64                              <1> 	popa
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    68                              <1> %macro	PUTCHAR 1
    69                              <1> 	pusha
    70                              <1> 	pushf
    71                              <1> %ifstr %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifnum %1
    74                              <1> 	mov	al, %1
    75                              <1> %elifidni %1,al
    76                              <1> 	nop
    77                              <1> %elifidni %1,ah
    78                              <1> 	mov	al, ah
    79                              <1> %elifidni %1,bl
    80                              <1> 	mov	al, bl
    81                              <1> %elifidni %1,bh
    82                              <1> 	mov	al, bh
    83                              <1> %elifidni %1,cl
    84                              <1> 	mov	al, cl
    85                              <1> %elifidni %1,ch
    86                              <1> 	mov	al, ch
    87                              <1> %elifidni %1,dl
    88                              <1> 	mov	al, dl
    89                              <1> %elifidni %1,dh
    90                              <1> 	mov	al, dh
    91                              <1> %else
    92                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    93                              <1> %endif
    94                              <1> 	sub	esp, 2  ; reserve memory for buffer
    95                              <1> 	mov	edi, esp
    96                              <1> 	mov	[edi], al
    97                              <1> 	_syscall_write 1, edi, 1
    98                              <1> 	add	esp, 2
    99                              <1> 	popf
   100                              <1> 	popa
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   104                              <1> %macro	GETCHAR 0
   105                              <1> 	pushf
   106                              <1> 	push	edi
   107                              <1> 	sub	esp, 2
   108                              <1> 	mov	edi, esp
   109                              <1> 	_syscall_read 0, edi, 1
   110                              <1> 	cmp	eax, 1
   111                              <1> 	jne	%%eof_reached
   112                              <1> 	xor	eax,eax
   113                              <1> 	mov	al, [edi]
   114                              <1> 	jmp	%%gcquit
   115                              <1> %%eof_reached:
   116                              <1> 	xor	eax, eax
   117                              <1> 	not	eax 		; eax := -1
   118                              <1> %%gcquit:
   119                              <1> 	add	esp, 2
   120                              <1> 	pop	edi
   121                              <1> 	popf
   122                              <1> %endmacro
   123                              <1> 
   124                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   125                              <1> %macro FINISH 0-1 0
   126                              <1> 	_syscall_exit %1
   127                              <1> %endmacro
   128                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   129                              <1> %macro UNSINT 1
   130                              <1> pusha
   131                              <1> pushf
   132                              <1> push dword %1
   133                              <1> pop eax
   134                              <1> mov edi,eax
   135                              <1> mov esi,10
   136                              <1>   xor ebx,ebx
   137                              <1> %%m1:
   138                              <1>    xor edx,edx
   139                              <1>    div esi
   140                              <1>    inc ebx
   141                              <1>    cmp eax,0
   142                              <1>    jne %%m1
   143                              <1>     
   144                              <1>    mov eax,1
   145                              <1>    mov ecx,ebx
   146                              <1>    dec ecx
   147                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   148                              <1>     cmp ecx,0
   149                              <1>      je %%m4
   150                              <1> %%m2:  mul esi
   151                              <1>        loop %%m2
   152                              <1> 
   153                              <1>        mov ebx,eax
   154                              <1> 
   155                              <1> %%m3:       
   156                              <1>       mov eax,edi 
   157                              <1>       xor edx,edx 
   158                              <1>       div ebx
   159                              <1>       add al,'0'
   160                              <1>       PUTCHAR al
   161                              <1>       mov edi,edx
   162                              <1>       xor edx,edx
   163                              <1>       mov eax,ebx
   164                              <1>       div esi
   165                              <1>       cmp eax,1
   166                              <1>       je %%m4
   167                              <1>       mov ebx,eax
   168                              <1>       jmp %%m3
   169                              <1>  %%m4:      
   170                              <1>       mov edx,edi
   171                              <1>       add dl,'0'
   172                              <1>       PUTCHAR dl
   173                              <1>        
   174                              <1>   
   175                              <1> popf
   176                              <1> popa
   177                              <1> %endmacro
   178                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179                              <1> %macro SIGNINT 1
   180                              <1> pusha
   181                              <1> pushf
   182                              <1> push dword %1
   183                              <1> pop eax
   184                              <1>     cmp eax,0
   185                              <1>     jge %%m5
   186                              <1>     PUTCHAR '-'
   187                              <1>     neg eax
   188                              <1> %%m5:
   189                              <1>       UNSINT eax
   190                              <1> popf
   191                              <1> popa
   192                              <1> %endmacro
   193                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   194                              <1> %macro GETUN 1
   195                              <1> pushad
   196                              <1> pushfd
   197                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   198                              <1> xor edi,edi
   199                              <1> xor esi,esi
   200                              <1> %%m1:
   201                              <1> GETCHAR
   202                              <1> cmp al,0xA
   203                              <1> je %%m2
   204                              <1> cmp al,'0'
   205                              <1> jb %%m_err
   206                              <1> cmp al,'9'
   207                              <1> ja %%m_err
   208                              <1> inc edi
   209                              <1> xor ecx,ecx
   210                              <1> mov cl,al
   211                              <1> mov eax,esi
   212                              <1> mov ebx,10
   213                              <1> mul ebx
   214                              <1> sub cl,48
   215                              <1> add eax,ecx
   216                              <1> jc %%m3
   217                              <1> mov esi,eax
   218                              <1> jmp %%m1
   219                              <1> %%m2: 
   220                              <1> cmp edi,0
   221                              <1> je %%m1
   222                              <1> jmp %%m4
   223                              <1> %%m3: PRINT "too big number"
   224                              <1> PUTCHAR 10
   225                              <1> jmp %%m4
   226                              <1> %%m_err: PRINT "ERROR!!!"
   227                              <1> PUTCHAR 0xa
   228                              <1> %%m4:
   229                              <1> ;;;;;;;;;;;;;;;;;;
   230                              <1> push esi
   231                              <1> add esp,4
   232                              <1> popfd
   233                              <1> popad
   234                              <1> sub esp,40
   235                              <1> pop dword %1
   236                              <1> add esp,36
   237                              <1> %endmacro
   238                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   239                              <1> %macro GETSIG 1
   240                              <1> pushad
   241                              <1> pushfd
   242                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   243                              <1> xor edi,edi
   244                              <1> xor esi,esi
   245                              <1> mov ebx,10
   246                              <1> %%m_st1: GETCHAR
   247                              <1> cmp al,0xa
   248                              <1> je %%m_st1
   249                              <1> cmp al,'-'
   250                              <1> jne %%s1
   251                              <1> mov ebx,-10
   252                              <1> push ebx
   253                              <1> GETCHAR
   254                              <1> cmp al,0xa
   255                              <1> je %%m_err
   256                              <1> jmp %%m_st21
   257                              <1> %%s1: push ebx 
   258                              <1> cmp al,'+'
   259                              <1> jne %%m_st21
   260                              <1> GETCHAR 
   261                              <1> cmp al,0xa
   262                              <1> je %%m_err
   263                              <1> jmp %%m_st21
   264                              <1> %%m_st2: GETCHAR
   265                              <1> %%m_st21:  cmp al,0xa
   266                              <1> je %%pr_end
   267                              <1> cmp al,'0'
   268                              <1> jb %%m_err
   269                              <1> cmp al,'9'
   270                              <1> ja %%m_err
   271                              <1> inc edi
   272                              <1> xor ecx,ecx
   273                              <1> mov cl,al
   274                              <1> mov eax,esi
   275                              <1> imul ebx
   276                              <1> sub cl,48
   277                              <1> cmp dword[esp],-10
   278                              <1> je %%j_s
   279                              <1> add eax,ecx
   280                              <1> jmp %%j_per
   281                              <1> %%j_s: sub eax,ecx
   282                              <1> %%j_per: jo %%m_b
   283                              <1> mov esi,eax
   284                              <1> cmp dword[esp],-10
   285                              <1> jne %%m_st2
   286                              <1> neg esi
   287                              <1> jmp %%m_st2
   288                              <1> %%pr_end:  cmp edi,0
   289                              <1> je %%m_st2
   290                              <1> jmp %%m_k
   291                              <1> ;;;;;;;;;
   292                              <1> %%m_err: pop ebx 
   293                              <1> PRINT "ERROR"
   294                              <1> PUTCHAR 0xa
   295                              <1> jmp %%m_end
   296                              <1> %%m_b: pop ebx 
   297                              <1> cmp ebx,-10
   298                              <1> je  %%m_l
   299                              <1> PRINT "too big"
   300                              <1> PUTCHAR 0xa
   301                              <1> jmp %%m_end
   302                              <1> %%m_l: PRINT "too less"
   303                              <1> PUTCHAR 0xa
   304                              <1> jmp %%m_end
   305                              <1> %%m_k: pop ebx
   306                              <1> cmp ebx,-10
   307                              <1> jne %%m_p
   308                              <1> neg esi 
   309                              <1> %%m_p: 
   310                              <1> 
   311                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   312                              <1> 
   313                              <1> push esi
   314                              <1> add esp,4
   315                              <1> popfd
   316                              <1> popad
   317                              <1> sub esp,40
   318                              <1> pop dword %1
   319                              <1> add esp,36
   320                              <1> jmp %%mm_e
   321                              <1> %%m_end:
   322                              <1> popfd
   323                              <1> popad
   324                              <1> %%mm_e:
   325                              <1> %endmacro
   326                              <1> 
   327                              <1> 
   328                              <1> 
   329                              <1> 
     2                                  
     3                                  global _start
     4                                  
     5                                  section .data
     6                                      
     7                                  section .bss
     8 00000000 ????????                    a resd 1
     9 00000004 ????????                    b resd 1
    10                                  
    11                                  section .text
    12                                  
    13                                  _start:
    14                                      GETUN [a]
   195 00000000 60                  <1> pushad
   196 00000001 9C                  <1> pushfd
   197                              <1> 
   198 00000002 31FF                <1> xor edi,edi
   199 00000004 31F6                <1> xor esi,esi
   200                              <1> %%m1:
   201                              <1> GETCHAR
   105 00000006 9C                  <2>  pushf
   106 00000007 57                  <2>  push edi
   107 00000008 83EC02              <2>  sub esp, 2
   108 0000000B 89E7                <2>  mov edi, esp
   109                              <2>  _syscall_read 0, edi, 1
    46                              <3>  _syscall_3 3,%1,%2,%3
    16 0000000D 52                  <4>  push edx
    17 0000000E 51                  <4>  push ecx
    18 0000000F 53                  <4>  push ebx
    19 00000010 6A03                <4>  push %1
    20 00000012 6A00                <4>  push %2
    21 00000014 57                  <4>  push %3
    22 00000015 6A01                <4>  push %4
    23 00000017 5A                  <4>  pop edx
    24 00000018 59                  <4>  pop ecx
    25 00000019 5B                  <4>  pop ebx
    26 0000001A 58                  <4>  pop eax
    27 0000001B CD80                <4>  int 0x80
    28 0000001D 5B                  <4>  pop ebx
    29 0000001E 59                  <4>  pop ecx
    30 0000001F 5A                  <4>  pop edx
   110 00000020 83F801              <2>  cmp eax, 1
   111 00000023 7506                <2>  jne %%eof_reached
   112 00000025 31C0                <2>  xor eax,eax
   113 00000027 8A07                <2>  mov al, [edi]
   114 00000029 EB04                <2>  jmp %%gcquit
   115                              <2> %%eof_reached:
   116 0000002B 31C0                <2>  xor eax, eax
   117 0000002D F7D0                <2>  not eax
   118                              <2> %%gcquit:
   119 0000002F 83C402              <2>  add esp, 2
   120 00000032 5F                  <2>  pop edi
   121 00000033 9D                  <2>  popf
   202 00000034 3C0A                <1> cmp al,0xA
   203 00000036 7421                <1> je %%m2
   204 00000038 3C30                <1> cmp al,'0'
   205 0000003A 7278                <1> jb %%m_err
   206 0000003C 3C39                <1> cmp al,'9'
   207 0000003E 7774                <1> ja %%m_err
   208 00000040 47                  <1> inc edi
   209 00000041 31C9                <1> xor ecx,ecx
   210 00000043 88C1                <1> mov cl,al
   211 00000045 89F0                <1> mov eax,esi
   212 00000047 BB0A000000          <1> mov ebx,10
   213 0000004C F7E3                <1> mul ebx
   214 0000004E 80E930              <1> sub cl,48
   215 00000051 01C8                <1> add eax,ecx
   216 00000053 720E                <1> jc %%m3
   217 00000055 89C6                <1> mov esi,eax
   218 00000057 EBAD                <1> jmp %%m1
   219                              <1> %%m2:
   220 00000059 83FF00              <1> cmp edi,0
   221 0000005C 74A8                <1> je %%m1
   222 0000005E E99A000000          <1> jmp %%m4
   223                              <1> %%m3: PRINT "too big number"
   223                              <2> ..@4.m3: 
    57 00000063 60                  <2>  pusha
    58 00000064 9C                  <2>  pushf
    59 00000065 EB0F                <2>  jmp %%astr
    60 00000067 746F6F20626967206E- <2> %%str db %1, 0
    60 00000070 756D62657200        <2>
    61                              <2> %%strln equ $-%%str
    62                              <2> %%astr: _syscall_write 1, %%str, %%strln
    62                              <3> ..@8.astr: 
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000076 52                  <4>  push edx
    17 00000077 51                  <4>  push ecx
    18 00000078 53                  <4>  push ebx
    19 00000079 6A04                <4>  push %1
    20 0000007B 6A01                <4>  push %2
    21 0000007D 68[67000000]        <4>  push %3
    22 00000082 6A0F                <4>  push %4
    23 00000084 5A                  <4>  pop edx
    24 00000085 59                  <4>  pop ecx
    25 00000086 5B                  <4>  pop ebx
    26 00000087 58                  <4>  pop eax
    27 00000088 CD80                <4>  int 0x80
    28 0000008A 5B                  <4>  pop ebx
    29 0000008B 59                  <4>  pop ecx
    30 0000008C 5A                  <4>  pop edx
    63 0000008D 9D                  <2>  popf
    64 0000008E 61                  <2>  popa
   224                              <1> PUTCHAR 10
    69 0000008F 60                  <2>  pusha
    70 00000090 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74 00000091 B00A                <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 00000093 83EC02              <2>  sub esp, 2
    95 00000096 89E7                <2>  mov edi, esp
    96 00000098 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 0000009A 52                  <4>  push edx
    17 0000009B 51                  <4>  push ecx
    18 0000009C 53                  <4>  push ebx
    19 0000009D 6A04                <4>  push %1
    20 0000009F 6A01                <4>  push %2
    21 000000A1 57                  <4>  push %3
    22 000000A2 6A01                <4>  push %4
    23 000000A4 5A                  <4>  pop edx
    24 000000A5 59                  <4>  pop ecx
    25 000000A6 5B                  <4>  pop ebx
    26 000000A7 58                  <4>  pop eax
    27 000000A8 CD80                <4>  int 0x80
    28 000000AA 5B                  <4>  pop ebx
    29 000000AB 59                  <4>  pop ecx
    30 000000AC 5A                  <4>  pop edx
    98 000000AD 83C402              <2>  add esp, 2
    99 000000B0 9D                  <2>  popf
   100 000000B1 61                  <2>  popa
   225 000000B2 EB49                <1> jmp %%m4
   226                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <2> ..@4.m_err: 
    57 000000B4 60                  <2>  pusha
    58 000000B5 9C                  <2>  pushf
    59 000000B6 EB09                <2>  jmp %%astr
    60 000000B8 4552524F5221212100  <2> %%str db %1, 0
    61                              <2> %%strln equ $-%%str
    62                              <2> %%astr: _syscall_write 1, %%str, %%strln
    62                              <3> ..@14.astr: 
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 000000C1 52                  <4>  push edx
    17 000000C2 51                  <4>  push ecx
    18 000000C3 53                  <4>  push ebx
    19 000000C4 6A04                <4>  push %1
    20 000000C6 6A01                <4>  push %2
    21 000000C8 68[B8000000]        <4>  push %3
    22 000000CD 6A09                <4>  push %4
    23 000000CF 5A                  <4>  pop edx
    24 000000D0 59                  <4>  pop ecx
    25 000000D1 5B                  <4>  pop ebx
    26 000000D2 58                  <4>  pop eax
    27 000000D3 CD80                <4>  int 0x80
    28 000000D5 5B                  <4>  pop ebx
    29 000000D6 59                  <4>  pop ecx
    30 000000D7 5A                  <4>  pop edx
    63 000000D8 9D                  <2>  popf
    64 000000D9 61                  <2>  popa
   227                              <1> PUTCHAR 0xa
    69 000000DA 60                  <2>  pusha
    70 000000DB 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74 000000DC B00A                <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 000000DE 83EC02              <2>  sub esp, 2
    95 000000E1 89E7                <2>  mov edi, esp
    96 000000E3 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 000000E5 52                  <4>  push edx
    17 000000E6 51                  <4>  push ecx
    18 000000E7 53                  <4>  push ebx
    19 000000E8 6A04                <4>  push %1
    20 000000EA 6A01                <4>  push %2
    21 000000EC 57                  <4>  push %3
    22 000000ED 6A01                <4>  push %4
    23 000000EF 5A                  <4>  pop edx
    24 000000F0 59                  <4>  pop ecx
    25 000000F1 5B                  <4>  pop ebx
    26 000000F2 58                  <4>  pop eax
    27 000000F3 CD80                <4>  int 0x80
    28 000000F5 5B                  <4>  pop ebx
    29 000000F6 59                  <4>  pop ecx
    30 000000F7 5A                  <4>  pop edx
    98 000000F8 83C402              <2>  add esp, 2
    99 000000FB 9D                  <2>  popf
   100 000000FC 61                  <2>  popa
   228                              <1> %%m4:
   229                              <1> 
   230 000000FD 56                  <1> push esi
   231 000000FE 83C404              <1> add esp,4
   232 00000101 9D                  <1> popfd
   233 00000102 61                  <1> popad
   234 00000103 83EC28              <1> sub esp,40
   235 00000106 8F05[00000000]      <1> pop dword %1
   236 0000010C 83C424              <1> add esp,36
    15                                      GETUN [b]
   195 0000010F 60                  <1> pushad
   196 00000110 9C                  <1> pushfd
   197                              <1> 
   198 00000111 31FF                <1> xor edi,edi
   199 00000113 31F6                <1> xor esi,esi
   200                              <1> %%m1:
   201                              <1> GETCHAR
   105 00000115 9C                  <2>  pushf
   106 00000116 57                  <2>  push edi
   107 00000117 83EC02              <2>  sub esp, 2
   108 0000011A 89E7                <2>  mov edi, esp
   109                              <2>  _syscall_read 0, edi, 1
    46                              <3>  _syscall_3 3,%1,%2,%3
    16 0000011C 52                  <4>  push edx
    17 0000011D 51                  <4>  push ecx
    18 0000011E 53                  <4>  push ebx
    19 0000011F 6A03                <4>  push %1
    20 00000121 6A00                <4>  push %2
    21 00000123 57                  <4>  push %3
    22 00000124 6A01                <4>  push %4
    23 00000126 5A                  <4>  pop edx
    24 00000127 59                  <4>  pop ecx
    25 00000128 5B                  <4>  pop ebx
    26 00000129 58                  <4>  pop eax
    27 0000012A CD80                <4>  int 0x80
    28 0000012C 5B                  <4>  pop ebx
    29 0000012D 59                  <4>  pop ecx
    30 0000012E 5A                  <4>  pop edx
   110 0000012F 83F801              <2>  cmp eax, 1
   111 00000132 7506                <2>  jne %%eof_reached
   112 00000134 31C0                <2>  xor eax,eax
   113 00000136 8A07                <2>  mov al, [edi]
   114 00000138 EB04                <2>  jmp %%gcquit
   115                              <2> %%eof_reached:
   116 0000013A 31C0                <2>  xor eax, eax
   117 0000013C F7D0                <2>  not eax
   118                              <2> %%gcquit:
   119 0000013E 83C402              <2>  add esp, 2
   120 00000141 5F                  <2>  pop edi
   121 00000142 9D                  <2>  popf
   202 00000143 3C0A                <1> cmp al,0xA
   203 00000145 7421                <1> je %%m2
   204 00000147 3C30                <1> cmp al,'0'
   205 00000149 7278                <1> jb %%m_err
   206 0000014B 3C39                <1> cmp al,'9'
   207 0000014D 7774                <1> ja %%m_err
   208 0000014F 47                  <1> inc edi
   209 00000150 31C9                <1> xor ecx,ecx
   210 00000152 88C1                <1> mov cl,al
   211 00000154 89F0                <1> mov eax,esi
   212 00000156 BB0A000000          <1> mov ebx,10
   213 0000015B F7E3                <1> mul ebx
   214 0000015D 80E930              <1> sub cl,48
   215 00000160 01C8                <1> add eax,ecx
   216 00000162 720E                <1> jc %%m3
   217 00000164 89C6                <1> mov esi,eax
   218 00000166 EBAD                <1> jmp %%m1
   219                              <1> %%m2:
   220 00000168 83FF00              <1> cmp edi,0
   221 0000016B 74A8                <1> je %%m1
   222 0000016D E99A000000          <1> jmp %%m4
   223                              <1> %%m3: PRINT "too big number"
   223                              <2> ..@20.m3: 
    57 00000172 60                  <2>  pusha
    58 00000173 9C                  <2>  pushf
    59 00000174 EB0F                <2>  jmp %%astr
    60 00000176 746F6F20626967206E- <2> %%str db %1, 0
    60 0000017F 756D62657200        <2>
    61                              <2> %%strln equ $-%%str
    62                              <2> %%astr: _syscall_write 1, %%str, %%strln
    62                              <3> ..@24.astr: 
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 00000185 52                  <4>  push edx
    17 00000186 51                  <4>  push ecx
    18 00000187 53                  <4>  push ebx
    19 00000188 6A04                <4>  push %1
    20 0000018A 6A01                <4>  push %2
    21 0000018C 68[76010000]        <4>  push %3
    22 00000191 6A0F                <4>  push %4
    23 00000193 5A                  <4>  pop edx
    24 00000194 59                  <4>  pop ecx
    25 00000195 5B                  <4>  pop ebx
    26 00000196 58                  <4>  pop eax
    27 00000197 CD80                <4>  int 0x80
    28 00000199 5B                  <4>  pop ebx
    29 0000019A 59                  <4>  pop ecx
    30 0000019B 5A                  <4>  pop edx
    63 0000019C 9D                  <2>  popf
    64 0000019D 61                  <2>  popa
   224                              <1> PUTCHAR 10
    69 0000019E 60                  <2>  pusha
    70 0000019F 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74 000001A0 B00A                <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 000001A2 83EC02              <2>  sub esp, 2
    95 000001A5 89E7                <2>  mov edi, esp
    96 000001A7 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 000001A9 52                  <4>  push edx
    17 000001AA 51                  <4>  push ecx
    18 000001AB 53                  <4>  push ebx
    19 000001AC 6A04                <4>  push %1
    20 000001AE 6A01                <4>  push %2
    21 000001B0 57                  <4>  push %3
    22 000001B1 6A01                <4>  push %4
    23 000001B3 5A                  <4>  pop edx
    24 000001B4 59                  <4>  pop ecx
    25 000001B5 5B                  <4>  pop ebx
    26 000001B6 58                  <4>  pop eax
    27 000001B7 CD80                <4>  int 0x80
    28 000001B9 5B                  <4>  pop ebx
    29 000001BA 59                  <4>  pop ecx
    30 000001BB 5A                  <4>  pop edx
    98 000001BC 83C402              <2>  add esp, 2
    99 000001BF 9D                  <2>  popf
   100 000001C0 61                  <2>  popa
   225 000001C1 EB49                <1> jmp %%m4
   226                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <2> ..@20.m_err: 
    57 000001C3 60                  <2>  pusha
    58 000001C4 9C                  <2>  pushf
    59 000001C5 EB09                <2>  jmp %%astr
    60 000001C7 4552524F5221212100  <2> %%str db %1, 0
    61                              <2> %%strln equ $-%%str
    62                              <2> %%astr: _syscall_write 1, %%str, %%strln
    62                              <3> ..@30.astr: 
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 000001D0 52                  <4>  push edx
    17 000001D1 51                  <4>  push ecx
    18 000001D2 53                  <4>  push ebx
    19 000001D3 6A04                <4>  push %1
    20 000001D5 6A01                <4>  push %2
    21 000001D7 68[C7010000]        <4>  push %3
    22 000001DC 6A09                <4>  push %4
    23 000001DE 5A                  <4>  pop edx
    24 000001DF 59                  <4>  pop ecx
    25 000001E0 5B                  <4>  pop ebx
    26 000001E1 58                  <4>  pop eax
    27 000001E2 CD80                <4>  int 0x80
    28 000001E4 5B                  <4>  pop ebx
    29 000001E5 59                  <4>  pop ecx
    30 000001E6 5A                  <4>  pop edx
    63 000001E7 9D                  <2>  popf
    64 000001E8 61                  <2>  popa
   227                              <1> PUTCHAR 0xa
    69 000001E9 60                  <2>  pusha
    70 000001EA 9C                  <2>  pushf
    71                              <2> %ifstr %1
    72                              <2>  mov al, %1
    73                              <2> %elifnum %1
    74 000001EB B00A                <2>  mov al, %1
    75                              <2> %elifidni %1,al
    76                              <2>  nop
    77                              <2> %elifidni %1,ah
    78                              <2>  mov al, ah
    79                              <2> %elifidni %1,bl
    80                              <2>  mov al, bl
    81                              <2> %elifidni %1,bh
    82                              <2>  mov al, bh
    83                              <2> %elifidni %1,cl
    84                              <2>  mov al, cl
    85                              <2> %elifidni %1,ch
    86                              <2>  mov al, ch
    87                              <2> %elifidni %1,dl
    88                              <2>  mov al, dl
    89                              <2> %elifidni %1,dh
    90                              <2>  mov al, dh
    91                              <2> %else
    92                              <2>  mov al, %1
    93                              <2> %endif
    94 000001ED 83EC02              <2>  sub esp, 2
    95 000001F0 89E7                <2>  mov edi, esp
    96 000001F2 8807                <2>  mov [edi], al
    97                              <2>  _syscall_write 1, edi, 1
    52                              <3>  _syscall_3 4,%1,%2,%3
    16 000001F4 52                  <4>  push edx
    17 000001F5 51                  <4>  push ecx
    18 000001F6 53                  <4>  push ebx
    19 000001F7 6A04                <4>  push %1
    20 000001F9 6A01                <4>  push %2
    21 000001FB 57                  <4>  push %3
    22 000001FC 6A01                <4>  push %4
    23 000001FE 5A                  <4>  pop edx
    24 000001FF 59                  <4>  pop ecx
    25 00000200 5B                  <4>  pop ebx
    26 00000201 58                  <4>  pop eax
    27 00000202 CD80                <4>  int 0x80
    28 00000204 5B                  <4>  pop ebx
    29 00000205 59                  <4>  pop ecx
    30 00000206 5A                  <4>  pop edx
    98 00000207 83C402              <2>  add esp, 2
    99 0000020A 9D                  <2>  popf
   100 0000020B 61                  <2>  popa
   228                              <1> %%m4:
   229                              <1> 
   230 0000020C 56                  <1> push esi
   231 0000020D 83C404              <1> add esp,4
   232 00000210 9D                  <1> popfd
   233 00000211 61                  <1> popad
   234 00000212 83EC28              <1> sub esp,40
   235 00000215 8F05[04000000]      <1> pop dword %1
   236 0000021B 83C424              <1> add esp,36
    16                                  
    17 0000021E A1[00000000]                mov eax, [a]
    18 00000223 F72D[04000000]              imul dword[b]
    19                                  
    20 00000229 7050                        jo overflow
    21                                  
    22                                      PRINT "YES"
    57 0000022B 60                  <1>  pusha
    58 0000022C 9C                  <1>  pushf
    59 0000022D EB04                <1>  jmp %%astr
    60 0000022F 59455300            <1> %%str db %1, 0
    61                              <1> %%strln equ $-%%str
    62                              <1> %%astr: _syscall_write 1, %%str, %%strln
    62                              <2> ..@36.astr: 
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 00000233 52                  <3>  push edx
    17 00000234 51                  <3>  push ecx
    18 00000235 53                  <3>  push ebx
    19 00000236 6A04                <3>  push %1
    20 00000238 6A01                <3>  push %2
    21 0000023A 68[2F020000]        <3>  push %3
    22 0000023F 6A04                <3>  push %4
    23 00000241 5A                  <3>  pop edx
    24 00000242 59                  <3>  pop ecx
    25 00000243 5B                  <3>  pop ebx
    26 00000244 58                  <3>  pop eax
    27 00000245 CD80                <3>  int 0x80
    28 00000247 5B                  <3>  pop ebx
    29 00000248 59                  <3>  pop ecx
    30 00000249 5A                  <3>  pop edx
    63 0000024A 9D                  <1>  popf
    64 0000024B 61                  <1>  popa
    23                                      PUTCHAR 0xA
    69 0000024C 60                  <1>  pusha
    70 0000024D 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72                              <1>  mov al, %1
    73                              <1> %elifnum %1
    74 0000024E B00A                <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 00000250 83EC02              <1>  sub esp, 2
    95 00000253 89E7                <1>  mov edi, esp
    96 00000255 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 00000257 52                  <3>  push edx
    17 00000258 51                  <3>  push ecx
    18 00000259 53                  <3>  push ebx
    19 0000025A 6A04                <3>  push %1
    20 0000025C 6A01                <3>  push %2
    21 0000025E 57                  <3>  push %3
    22 0000025F 6A01                <3>  push %4
    23 00000261 5A                  <3>  pop edx
    24 00000262 59                  <3>  pop ecx
    25 00000263 5B                  <3>  pop ebx
    26 00000264 58                  <3>  pop eax
    27 00000265 CD80                <3>  int 0x80
    28 00000267 5B                  <3>  pop ebx
    29 00000268 59                  <3>  pop ecx
    30 00000269 5A                  <3>  pop edx
    98 0000026A 83C402              <1>  add esp, 2
    99 0000026D 9D                  <1>  popf
   100 0000026E 61                  <1>  popa
    24                                  
    25                                      FINISH
   126                              <1>  _syscall_exit %1
    35 0000026F BB00000000          <2>  mov ebx, %1
    36 00000274 B801000000          <2>  mov eax, 1
    37 00000279 CD80                <2>  int 0x80
    26                                  
    27                                  overflow:
    28                                      PRINT "NO"
    57 0000027B 60                  <1>  pusha
    58 0000027C 9C                  <1>  pushf
    59 0000027D EB03                <1>  jmp %%astr
    60 0000027F 4E4F00              <1> %%str db %1, 0
    61                              <1> %%strln equ $-%%str
    62                              <1> %%astr: _syscall_write 1, %%str, %%strln
    62                              <2> ..@44.astr: 
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 00000282 52                  <3>  push edx
    17 00000283 51                  <3>  push ecx
    18 00000284 53                  <3>  push ebx
    19 00000285 6A04                <3>  push %1
    20 00000287 6A01                <3>  push %2
    21 00000289 68[7F020000]        <3>  push %3
    22 0000028E 6A03                <3>  push %4
    23 00000290 5A                  <3>  pop edx
    24 00000291 59                  <3>  pop ecx
    25 00000292 5B                  <3>  pop ebx
    26 00000293 58                  <3>  pop eax
    27 00000294 CD80                <3>  int 0x80
    28 00000296 5B                  <3>  pop ebx
    29 00000297 59                  <3>  pop ecx
    30 00000298 5A                  <3>  pop edx
    63 00000299 9D                  <1>  popf
    64 0000029A 61                  <1>  popa
    29                                      PUTCHAR 0xA
    69 0000029B 60                  <1>  pusha
    70 0000029C 9C                  <1>  pushf
    71                              <1> %ifstr %1
    72                              <1>  mov al, %1
    73                              <1> %elifnum %1
    74 0000029D B00A                <1>  mov al, %1
    75                              <1> %elifidni %1,al
    76                              <1>  nop
    77                              <1> %elifidni %1,ah
    78                              <1>  mov al, ah
    79                              <1> %elifidni %1,bl
    80                              <1>  mov al, bl
    81                              <1> %elifidni %1,bh
    82                              <1>  mov al, bh
    83                              <1> %elifidni %1,cl
    84                              <1>  mov al, cl
    85                              <1> %elifidni %1,ch
    86                              <1>  mov al, ch
    87                              <1> %elifidni %1,dl
    88                              <1>  mov al, dl
    89                              <1> %elifidni %1,dh
    90                              <1>  mov al, dh
    91                              <1> %else
    92                              <1>  mov al, %1
    93                              <1> %endif
    94 0000029F 83EC02              <1>  sub esp, 2
    95 000002A2 89E7                <1>  mov edi, esp
    96 000002A4 8807                <1>  mov [edi], al
    97                              <1>  _syscall_write 1, edi, 1
    52                              <2>  _syscall_3 4,%1,%2,%3
    16 000002A6 52                  <3>  push edx
    17 000002A7 51                  <3>  push ecx
    18 000002A8 53                  <3>  push ebx
    19 000002A9 6A04                <3>  push %1
    20 000002AB 6A01                <3>  push %2
    21 000002AD 57                  <3>  push %3
    22 000002AE 6A01                <3>  push %4
    23 000002B0 5A                  <3>  pop edx
    24 000002B1 59                  <3>  pop ecx
    25 000002B2 5B                  <3>  pop ebx
    26 000002B3 58                  <3>  pop eax
    27 000002B4 CD80                <3>  int 0x80
    28 000002B6 5B                  <3>  pop ebx
    29 000002B7 59                  <3>  pop ecx
    30 000002B8 5A                  <3>  pop edx
    98 000002B9 83C402              <1>  add esp, 2
    99 000002BC 9D                  <1>  popf
   100 000002BD 61                  <1>  popa
    30                                  
    31                                      FINISH
   126                              <1>  _syscall_exit %1
    35 000002BE BB00000000          <2>  mov ebx, %1
    36 000002C3 B801000000          <2>  mov eax, 1
    37 000002C8 CD80                <2>  int 0x80
